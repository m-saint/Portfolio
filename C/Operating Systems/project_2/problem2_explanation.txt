A deadlock will occur if multiple players wait for each other's stances. Or if a player holds exclusive access to a stance it currently reserves while waiting for another stance it needs to reserve before proceeding.
These conditions are avoided by ensuring that, when on the mat, no two players are ever in need of each other's stances, and by players only reserving their stances if they can reserve all the ones they need. 
This obviously decreases parallelism because we must limit the players which have access to the mat and certain stances at a time. The process of having to reserve stances in advance means that only players with compatible stance cards can share the mat at any time. We are limiting how much we get done at a time, but ensuring that the program can continue to run without getting itself stuck.
I minimized this decrease in performance by first designing a program without these avoidance strategies, and then adding them in slowly and sparingly such that no more limitations were imposed than absolutely necessary to avoid deadlock and ensure no team starves.
I have a reservation system where players check if their card is compatible with the mat, acquire all stances at once, and proceed to the mat. Any player who is unable to reserve their entire card must wait and try again. If a player fails too many times and is starving, it is allowed to run through the reservation process at a faster rate than the others, increasing its chances of successfully reserving its card.